Question 1
We want to understand more about the movies that families are watching. The following categories are considered family movies: Animation, Children, Classics, Comedy, Family and Music.
Create a query that lists each movie, the film category it is classified in, and the number of times it has been rented out.

SOLUTION
SELECT title, category_name, COUNT(rented_id) rental_times
FROM (SELECT f.film_id, f.title title, c.name category_name, r.rental_id rented_id
    FROM film f
    JOIN film_category fc
    ON f.film_id = fc.film_id
    JOIN category c 
    ON fc.category_id = c.category_id
    JOIN inventory i
    ON f.film_id = i.film_id
    JOIN rental r 
    ON i.inventory_id = r.inventory_id
    ORDER BY 2)sub
WHERE category_name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music')
GROUP BY 1,2
ORDER BY 2,1;


Question 2
Finally, provide a table with the family-friendly film category, each of the quartiles, and the corresponding count of movies within each combination of film category for each corresponding rental duration category. The resulting table should have three columns:
Category
Rental length category
Count

SOLUTION

SELECT category_name, standard_quartile, COUNT(*)
FROM(SELECT title, category_name, rental_period,  NTILE (4) OVER (ORDER BY rental_period) AS standard_quartile
    FROM(SELECT f.title title, c.name category_name, f.rental_duration rental_period
    FROM film f
    JOIN film_category fc
    ON f.film_id = fc.film_id
    JOIN category c 
    ON fc.category_id = c.category_id)sub
WHERE category_name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music'))sub2
GROUP BY 1,2
ORDER BY 1,2;


Question 3
We would like to know who were our top 10 paying customers, how many payments they made on a monthly basis during 2007, and what was the amount of the monthly payments. Can you write a query to capture the customer name, month and year of payment, and total payment amount for each month by these top 10 paying customers?

SOLUTION

SELECT DATE_TRUNC('month', p.payment_date) pay_month, c.first_name || ' ' || c.last_name AS full_name, COUNT(p.amount) AS num_times_paid, SUM(p.amount) AS pay_amount
FROM customer c
    JOIN payment p
    ON p.customer_id = c.customer_id
WHERE c.first_name || ' ' || c.last_name IN
    (SELECT sub1.full_name
    FROM
    (SELECT c.first_name || ' ' || c.last_name AS full_name, SUM(p.amount) as amount_total
    FROM customer c
    JOIN payment p
    ON p.customer_id = c.customer_id
    GROUP BY 1	
    ORDER BY 2 DESC
    LIMIT 10) sub1) AND (p.payment_date BETWEEN '2007-01-01' AND '2008-01-01')
GROUP BY 2, 1
ORDER BY 2, 1;


Question 4
Finally, for each of these top 10 paying customers, I would like to find out the difference across their monthly payments during 2007. Please go ahead and write a query to compare the payment amounts in each successive month. Repeat this for each of these 10 paying customers. Also, it will be tremendously helpful if you can identify the customer name who paid the most difference in terms of payments.

SOLUTION

WITH t1 as  (SELECT DATE_PART('month', p.payment_date) pay_month, c.first_name || ' ' || c.last_name AS full_name, COUNT(p.amount) AS num_times_paid, SUM

(p.amount) AS pay_amount, LEAD(SUM(p.amount)) OVER(PARTITION BY c.first_name || ' ' || c.last_name ORDER BY DATE_PART('month', p.payment_date)) AS lead, 

LEAD(SUM(p.amount)) OVER(PARTITION BY c.first_name || ' ' || c.last_name ORDER BY DATE_PART('month', p.payment_date)) - SUM(p.amount) AS lead_difference
FROM customer c
JOIN payment p
ON p.customer_id = c.customer_id
WHERE c.first_name || ' ' || c.last_name IN
(SELECT sub1.full_name
    FROM
        (SELECT c.first_name || ' ' || c.last_name AS full_name, SUM(p.amount) as amount_total
        FROM customer c
        JOIN payment p
        ON p.customer_id = c.customer_id
        GROUP BY 1	
        ORDER BY 2 DESC
        LIMIT 10) sub1) AND (p.payment_date BETWEEN '2007-01-01' AND '2008-01-01')
    GROUP BY 2, 1)

SELECT t1.*,
       CASE
           WHEN t1.lead_difference = (SELECT MAX(t1.lead_difference) FROM t1 ORDER BY 1 DESC LIMIT 1) THEN 'Maximum difference'
           ELSE NULL
           END AS is_max					
FROM t1
ORDER BY 1;
